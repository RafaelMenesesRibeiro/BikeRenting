package org.binas.station.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.util.Map;

import javax.xml.ws.BindingProvider;

import java.util.concurrent.Future;
import javax.xml.ws.Response;
import javax.xml.ws.AsyncHandler;

import org.binas.station.ws.BadInit_Exception;
import org.binas.station.ws.NoBinaAvail_Exception;
import org.binas.station.ws.NoSlotAvail_Exception;
import org.binas.station.ws.UserNotFound_Exception;
import org.binas.station.ws.StationPortType;
import org.binas.station.ws.StationService;
import org.binas.station.ws.StationView;
import org.binas.station.ws.BalanceView;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;

/**
 * Client port wrapper.
 *
 * Adds easier end point address configuration to the Port generated by
 * wsimport.
 */
public class StationClient implements StationPortType {

	/** WS service */
	StationService service = null;

	/** WS port (port type is the interface, port is the implementation) */
	StationPortType port = null;

	/** UDDI server URL */
	private String uddiURL = null;

	/** WS name */
	private String wsName = null;

	/** WS end point address */
	private String wsURL = null; // default value is defined inside WSDL

	public String getWsURL() {
		return wsURL;
	}

	/** output option **/
	private boolean verbose = false;

	public boolean isVerbose() {
		return verbose;
	}

	public void setVerbose(boolean verbose) {
		this.verbose = verbose;
	}

	/** constructor with provided web service URL */
	public StationClient(String wsURL) throws StationClientException {
		this.wsURL = wsURL;
		createStub();
	}

	/** constructor with provided UDDI location and name */
	public StationClient(String uddiURL, String wsName) throws StationClientException {
		this.uddiURL = uddiURL;
		this.wsName = wsName;
		uddiLookup();
		createStub();
	}

	/** UDDI lookup */
	private void uddiLookup() throws StationClientException {
		try {
			if (verbose)
				System.out.printf("Contacting UDDI at %s%n", uddiURL);
			UDDINaming uddiNaming = new UDDINaming(uddiURL);

			if (verbose)
				System.out.printf("Looking for '%s'%n", wsName);
			wsURL = uddiNaming.lookup(wsName);

		} catch (Exception e) {
			String msg = String.format("Client failed lookup on UDDI at %s!", uddiURL);
			throw new StationClientException(msg, e);
		}

		if (wsURL == null) {
			String msg = String.format("Service with name %s not found on UDDI at %s", wsName, uddiURL);
			throw new StationClientException(msg);
		}
	}

	/** Stub creation and configuration */
	private void createStub() {
		if (verbose)
			System.out.println("Creating stub ...");
		service = new StationService();
		port = service.getStationPort();

		if (wsURL != null) {
			if (verbose)
				System.out.println("Setting endpoint address ...");
			BindingProvider bindingProvider = (BindingProvider) port;
			Map<String, Object> requestContext = bindingProvider.getRequestContext();
			requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
		}
	}

	// remote invocation methods ----------------------------------------------

	@Override
	public StationView getInfo() {
		return port.getInfo();
	}

	@Override
	public Response<org.binas.station.ws.GetInfoResponse> getInfoAsync() { return port.getInfoAsync(); }

	@Override
	public Future<?> getInfoAsync(AsyncHandler<org.binas.station.ws.GetInfoResponse> asyncHandler) { return port.getInfoAsync(asyncHandler); }

	@Override
	public BalanceView getBalance(String email) throws UserNotFound_Exception { return port.getBalance(email); }

	public Response<org.binas.station.ws.GetBalanceResponse> getBalanceAsync(String email) { return port.getBalanceAsync(email); }

	public Future<?> getBalanceAsync(String email, AsyncHandler<org.binas.station.ws.GetBalanceResponse> asyncHandler) { return port.getBalanceAsync(email, asyncHandler); }

	@Override
	public void setBalance(String email, int balance, int seq, int cid) { port.setBalance(email, balance, seq, cid); }

	public Response<org.binas.station.ws.SetBalanceResponse> setBalanceAsync(String email, int balance, int seq, int cid) { return port.setBalanceAsync(email, balance, seq, cid); }

	public Future<?> setBalanceAsync(String email, int balance, int seq, int cid, AsyncHandler<org.binas.station.ws.SetBalanceResponse> asyncHandler) { return port.setBalanceAsync(email, balance, seq, cid, asyncHandler); }

	@Override
	public void getBina() throws NoBinaAvail_Exception {
		port.getBina();
	}

	@Override
	public Response<org.binas.station.ws.GetBinaResponse> getBinaAsync() { return port.getBinaAsync(); }

	@Override
	public Future<?> getBinaAsync(AsyncHandler<org.binas.station.ws.GetBinaResponse> asyncHandler) { return port.getBinaAsync(asyncHandler); }

	@Override
	public int returnBina() throws NoSlotAvail_Exception {
		return port.returnBina();
	}

	@Override
	public Response<org.binas.station.ws.ReturnBinaResponse> returnBinaAsync() { return port.returnBinaAsync(); }

	@Override
	public Future<?> returnBinaAsync(AsyncHandler<org.binas.station.ws.ReturnBinaResponse> asyncHandler) { return port.returnBinaAsync(asyncHandler); }

	// test control operations ------------------------------------------------

	@Override
	public String testPing(String inputMessage) {
		return port.testPing(inputMessage);
	}

	@Override
	public Response<org.binas.station.ws.TestPingResponse> testPingAsync(String inputMessage) { return port.testPingAsync(inputMessage); }

	@Override
	public Future<?> testPingAsync(String inputMessage, AsyncHandler<org.binas.station.ws.TestPingResponse> asyncHandler) { return port.testPingAsync(inputMessage, asyncHandler); }

	@Override
	public void testClear() {
		port.testClear();
	}

	@Override
	public Response<org.binas.station.ws.TestClearResponse> testClearAsync() { return port.testClearAsync(); }

	@Override
	public Future<?> testClearAsync(AsyncHandler<org.binas.station.ws.TestClearResponse> asyncHandler) { return port.testClearAsync(asyncHandler); }

	@Override
	public void testInit(int x, int y, int capacity, int returnPrize) throws BadInit_Exception {
		port.testInit(x, y, capacity, returnPrize);
	}

	@Override
	public Response<org.binas.station.ws.TestInitResponse> testInitAsync(int x, int y, int capacity, int returnPrize) { return port.testInitAsync(x, y, capacity, returnPrize); }

	@Override
	public Future<?> testInitAsync(int x, int y, int capacity, int returnPrize, AsyncHandler<org.binas.station.ws.TestInitResponse> asyncHandler) { return port.testInitAsync(x, y, capacity, returnPrize, asyncHandler); }

}
